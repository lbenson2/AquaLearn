@model AquaLearn.Client.Models.ExhibitViewModel
@using aldm = AquaLearn.Domain.Models;
@using AquaLearn.Client.Models;
@{
    ViewData["Title"] = "Home Page";
}

<body style="background-size: cover; background-image: url(https://cdn5.vectorstock.com/i/1000x1000/42/04/cartoon-shark-pirate-swimming-in-the-ocean-vector-6594204.jpg)">
    <div class="text-center">
        <h1 class="display-4">Welcome to Aqua Learn!</h1>
        <p>Create and account or login to learn about me and my crew! Explore or natural habitats and learn how to help keep our home clean!</p>
    </div>

</body>

<div class="row">
    <div class="col" style="display:flex; justify-content:center;">
        <canvas id="myCanvas" width="1080" height="480" style="border:1px solid #000000;"></canvas>
    </div>
</div>



<script>
    @{
        // C# to JS
        var Exhibit = new aldm.Exhibit();
        @:var vector3Destinations = [];
        @:var vector3Current = [0, 0, 0];
        @:var fishes = [];
        @:var school = [];
        @:var plants = [];
        // Turn each fish in Domain Exhibit into a ViewModel fish for the Client Exhibit
        foreach (var fish in Exhibit.Fishes)
        {

            FishViewModel newFish = new FishViewModel()
            {
                Vector3Current = fish.Vector3Current
                //TODO: add other properties once they can be initialized
            };

            @:vector3Current[0] = @fish.Vector3Current[0];
            @:vector3Current[1] = @fish.Vector3Current[1];
            @:vector3Current[2] = @fish.Vector3Current[2];

            if (Model.Fishes == null)
            {
                Model.Fishes = new List<FishViewModel>();
            }
            Model.Fishes.Add(newFish);
            
            @:var schooling = false;
            if (fish.Schooling == true)
            {
                @:schooling = true;
                @:school.push([vector3Current[0], vector3Current[1], vector3Current[2]]);
            }
            else
            {
                @:schooling = false;
                @:fishes.push([vector3Current[0], vector3Current[1], vector3Current[2]]);
            }

            @:vector3Destinations.push([0,0,0]);
        }
        // Turn each plant in Domain Exhibit into a ViewModel plant for the Client Exhibit
        foreach (var plant in Exhibit.Plants)
        {
            PlantViewModel newPlant = new PlantViewModel()
            {
                Vector3Current = plant.Vector3Current
                //TODO: add other properties once they can be initialized
            };

            @:vector3Current[0] = @plant.Vector3Current[0];
            @:vector3Current[1] = @plant.Vector3Current[1];
            @:vector3Current[2] = @plant.Vector3Current[2];

            if (Model.Plants == null)
            {
                Model.Plants = new List<PlantViewModel>();
            }
            Model.Plants.Add(newPlant);
            @:plants.push([vector3Current[0], vector3Current[1], vector3Current[2]]);
        }
        // Move Speed of fish
        @:var MoveSpeed = 1;
        // Canvas init
        @:var last = new Date();
        @:var myGameArea = draw();
        @:var ctx = getContext();

        // FPS set to ~60fps
        @:setInterval(function () { update(); }, 17);
    }

    function draw() {
        var myGameArea = document.getElementById("myCanvas");
        return myGameArea;
    }

    function getContext() {
        if (myGameArea.getContext) {
            ctx = myGameArea.getContext('2d');
        }
        return ctx;
    }

    function drawSquares(x, y, z) {
        ctx.fillRect(x, y, 50, 50);
    }

    function drawRectangles(x, y, z) {
        ctx.fillRect(x, y, 50, 50);
    }

    function clear() {
        ctx.clearRect(0, 0, 720, 480);
    }

    function place()
    {
        for (var i = 0; i < fishes.length; i++)
        {
            fishes[i] = swim(i, fishes[i][0], fishes[i][1], fishes[i][2]);
            ctx.fillStyle = "blue";
            drawSquares(fishes[i][0], fishes[i][1], fishes[i][2]);
        }

        for (var i = 0; i < school.length; i++) {
            school[i] = swimTogether(i, school[i][0], school[i][1], school[i][2]);
            ctx.fillStyle = "black";
            drawSquares(school[i][0], school[i][1], school[i][2]);
        }

        for (var i = 0; i < plants.length; i++)
        {
            ctx.fillStyle = "green";
            drawRectangles(plants[i][0], plants[i][1], plants[i][2]);
        }
    }

    function update() {
        clear();
        place();
    }

    function swim(i, x, y, z) {
        vector3Current = [x, y, z];
        //Check if at/near destination before moving
        checkDestination(i, vector3Destinations[i][0], vector3Destinations[i][1], vector3Destinations[i][2], vector3Current[0], vector3Current[1], vector3Current[2])
        vector3Current = basicMove(i, vector3Destinations[i][0], vector3Destinations[i][1], vector3Destinations[i][2], vector3Current[0], vector3Current[1], vector3Current[2]);

        return vector3Current;
    }

    function swimTogether(i, x, y, z) {
        
    }

    function testMove(x,y,z) {
        vector3Current = [x, y, z];

        vector3Current[0] += 1;

        return vector3Current;
    }

    function setDestination(i, x, y, z)
    {
        if (vector3Destinations[i] != null) {

            // TODO: get canvas width to be cap
            var x = getRandomInt(720);
            // TODO: get canvas height to be cap
            var y = getRandomInt(480);
            // Determine which layer the fish will swim on
            var z = getRandomInt(-15);

            // Set the x, y, z values
            vector3Destinations[i][0] = x;
            vector3Destinations[i][1] = y;
            vector3Destinations[i][2] = z;
        }
        else {
            vector3Destinations[i] = [ 0, 0, 0 ];
            setDestination(i, x, y, z);
        }
    }

    function getRandomInt(max) {
        return Math.floor(Math.random() * Math.floor(max));
    }

    function checkDestination(i, xd, yd, zd, xc, yc, zc) {
        var vector3Dest = [xd, yd, zd];
        var vector3Curr = [xc, yc, zc];
        if (vector3Dest[i] == null
            || vector3Dest[0] == 0
            && vector3Dest[1] == 0
            && vector3Dest[2] == 0) {
            setDestination(i, vector3Curr[0], vector3Curr[1], vector3Curr[2]);
        }

        if (vector3Curr[0] == vector3Dest[0]
            && vector3Curr[1] == vector3Dest[1]) {
            setDestination(i, vector3Curr[0], vector3Curr[1], vector3Curr[2]);
        }
    }

    function basicMove(i, xd, yd, zd, xc, yc, zc) {

        // Swim right
        if (vector3Current[0] < vector3Destinations[i][0]) {
            vector3Current[0] += MoveSpeed;
        }

        // Swim left
        if (vector3Current[0] > vector3Destinations[i][0]) {
            vector3Current[0] -= MoveSpeed;
        }

        // Swim down
        if (vector3Current[1] < vector3Destinations[i][1]) {
            vector3Current[1] += MoveSpeed;
        }

        // Swim up
        if (vector3Current[1] > vector3Destinations[i][1]) {
            vector3Current[1] -= MoveSpeed;
        }
    }
</script>
