@{
    ViewData["Title"] = "Exhibit";
}

<h1>Habitat</h1>

<style>
  figure {
    display: inline-block;
    text-align: center;
    justify-content:center;
    border: 2px solid #aaaaaa;
  }
</style>


<div>
    <div>
        <button type="button" onclick="changeExhibit(this.id)" id="_DeepOcean">Deep Sea</button>
        <button type="button" onclick="changeExhibit(this.id)" id="_CoralReef">Coral Reef</button>
        <button type="button" onclick="changeExhibit(this.id)" id="_Pollution">Pollution</button>
    </div>

    <div id="placeholder">
      <div style="display:flex; justify-content:center;">
        <canvas id="myCanvas" width="720" height="480" style="border:1px solid #000000;"></canvas>
      </div>
      <figure width="720">
        <article>
          lorem ipsum
        </article>
        <article>
          lorem
        </article>
      </figure>
    </div>
</div>

<script type="text/javascript">
    // *******************
    // MAIN
    // *******************

    // INITIALIZE
    var fishSpriteSheet = new Image();
    fishSpriteSheet.src = "@Url.Content("~/images/fishSpriteSheet.png")";
    var vector3Destinations = [];
    var vector3Current = [0, 0, 0];
    var numFish = getRandomIntRange(3, 15);
    var numPlants = getRandomIntRange(5, 10);
    var fishes = [];
    var fishesMove = [];
    var trash = [];
    var school = [];
    var plants = [];
    var schooling = getRandomIntRange(0, 2);
    var direction = ['l', 'r'];

    // Move Speed of fish
    var MoveSpeed = 1;
    var canvasHeight = 480;
    var canvasWidth = 720;
    var boundary = 100;
    // Canvas init
    var last = new Date();
    var myGameArea = draw();
    var ctx = getContext();
    var schoolingVector3 = setRndVector3();
    var exhibitType = "_DeepOcean"

    init();
    setInterval(function () { update(); }, 17);

    function init() {
        // Init Fish
        for (var i = 0; i <= numFish; i++) {
            schooling = getRandomIntRange(0, 2);
            // add fish to fishes
            if (schooling == 0) {
                vector3Current = setRndVector3();
                fishes.push(vector3Current);
            }
            else {
                if (schoolingVector3 == null) {
                    vector3Current = setRndVector3();
                    schoolingVector3 = vector3Current;
                }
                else {
                    vector3Current = schoolingVector3;
                }
                school.push(vector3Current);
            }

            fishesMove.push(direction[0]);
            vector3Destinations.push([0,0,0]);
        }

        // Init Plants
        for (var i = 0; i <= numPlants; i++) {
            plants.push(setPlantDestination());
        }
    }

    // UPDATE

    function update() {
        clear();
        place();
    }

    function clear() {
        ctx.clearRect(0, 0, 720, 480);
    }

    function place() {
        var regColor;
        var schoolColor;
        var plantColor;

        switch (exhibitType) {
            case "_CoralReef":
                regColor = "blue";
                schoolColor = "black";
                plantColor = "green";
                break;
            case "_DeepOcean":
                regColor = "red";
                schoolColor = "purple";
                plantColor = "lime";
                break;
            default:
                regColor = "brown";
                schoolColor = "grey";
                plantColor = "black";
                break;
        }

        drawBackground();

        for (var i = 0; i < fishes.length; i++) {
            fishes[i] = swim(i, fishes[i][0], fishes[i][1], fishes[i][2]);
            // currFish setup [name, startx, startyl, startyr, width, height]
            var currFish = getFish();
            var yPos;
            if (fishesMove[i] == 'l') {
                yPos = currFish[2];
            }
            else {
                yPos = currFish[3];
            }

            drawImage(fishSpriteSheet, currFish[1], yPos, currFish[4], currFish[5], fishes[i][0], fishes[i][1], currFish[4], currFish[5]);
        }

        for (var i = 0; i < school.length; i++) {
            destPos = i + fishes.length;
            school[i] = swimTogether(destPos, school[i][0], school[i][1], school[i][2]);
            ctx.fillStyle = schoolColor;
            drawSquares(school[i][0], school[i][1], school[i][2]);
        }

        for (var i = 0; i < plants.length; i++) {
            ctx.fillStyle = plantColor;
            drawRectangles(plants[i][0], plants[i][1], plants[i][2]);
        }
    }

    function refresh() {
        fishes = [];
        school = [];
        plants = [];

        numFish = getRandomIntRange(3, 15);
        numPlants = getRandomIntRange(5, 10);
        init();
    }

    // DRAW

    function draw() {
        var myGameArea = document.getElementById("myCanvas");
        return myGameArea;
    }

    function drawSquares(x, y, z) {
        ctx.fillRect(x, y, 50, 50);
    }

    function drawRectangles(x, y, z) {
        ctx.fillRect(x, y, 50, 100);
    }

    function drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh) {
        ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh);
    }

    function drawBackground() {
        // Create gradient
        var grd = ctx.createLinearGradient(0, 0, 0, 300);
        grd.addColorStop(0, "blue");
        grd.addColorStop(1, "darkblue");

        // Fill with gradient
        ctx.fillStyle = grd;
        ctx.fillRect(0, 0, canvasWidth, canvasHeight);
    }

    function checkDestination(xd, yd, zd, xc, yc, zc, schooling) {
        var vector3Dest = [xd, yd, zd];
        var vector3Curr = [xc, yc, zc];
        if (vector3Dest[0] == 0
            && vector3Dest[1] == 0
            && vector3Dest[2] == 0) {
            vector3Dest = setDestination(schooling);
        }

        if (vector3Curr[0] == vector3Dest[0]
            && vector3Curr[1] == vector3Dest[1]) {
            vector3Dest = setDestination(schooling);
        }

        return vector3Dest;
    }

    function changeExhibit(partialViewToInsert) {
        exhibitType = partialViewToInsert;
        refresh();
    }

    // *******************
    // GET AND SET
    // *******************

    // GET

    function getContext() {
        if (myGameArea.getContext) {
            ctx = myGameArea.getContext('2d');
        }
        return ctx;
    }

    function getFish() {
        // [name, startx, startyl, startyr, width, height]
        var shark = ["Shark", 250, 250, 0, 250, 150];
        var swordfish = ["Swordfish", 700, 250, 0, 250, 100];
        var tuna = ["Tuna", 500, 350, 100, 150, 50];
        var clownfish = ["Clownfish", 850, 350, 100, 100, 50];
        var stingray = ["Stingray", 350, 400, 150, 100, 100];
        var jellyfish = ["Jellyfish", 450, 400, 150, 100, 100];
        var eels = ["Eels", 950, 350, 100, 100, 50];
        var seahorse = ["Seahorse", 950, 400, 150, 100, 100];
        var whale = ["Whales", 0, 250, 0, 250, 150];
        var seal = ["Seals", 650, 350, 100, 200, 50];
        var walrus = ["Walruses", 500, 250, 0, 200, 100];
        var dolphin = ["Dolphins", 950, 250, 0, 250, 100];
        var manatee = ["Manatees", 150, 400, 150, 200, 100];
        var octopus = ["Ocotopus", 0, 400, 150, 150, 100];
        var squid = ["Giant Squid", 850, 400, 150, 100, 100];
        var oysters = ["Oysters", 550, 400, 150, 100, 100];

        return oysters;
    }

    function getRandomIntRange(min, max) {
        return Math.floor((Math.random() * (max - min)) + min);
    }

    // SET

    function setDestination(schooling) {
        vector3Dest = [0, 0, 0];
        var screenWidthMax;
        var screenHeightMax;
        var screenDepthMax = 15;
        var screenWidthMin;
        var screenHeightMin;
        var screenDepthMin = 0;

        if (!schooling) {
            screenWidthMax = 720;
            screenHeightMax = 480;
            screenWidthMin = 0;
            screenHeightMin = 0;
        }
        else {
            screenWidthMax = vector3Destinations[fishes.length][0] + boundary;
            screenHeightMax = vector3Destinations[fishes.length][1] + boundary;
            screenWidthMin = vector3Destinations[fishes.length][0] - boundary;
            screenHeightMin = vector3Destinations[fishes.length][1] - boundary;
        }
        vector3Dest[0] = getRandomIntRange(screenWidthMin, screenWidthMax);
        vector3Dest[1] = getRandomIntRange(screenHeightMin, screenHeightMax);
        // Determine which layer the fish will swim on
        vector3Dest[2] = getRandomIntRange(screenDepthMin, screenDepthMax);

        return vector3Dest;
    }

    function setPlantDestination() {
        vector3Dest = [0, 0, 0];
        var screenWidthMax;
        var screenHeightMax;
        var screenDepthMax = 15;
        var screenWidthMin;
        var screenHeightMin;
        var screenDepthMin = 0;

        screenWidthMax = canvasWidth;
        screenHeightMax = canvasHeight;
        screenWidthMin = 0;
        screenHeightMin = canvasHeight * 0.8;

        vector3Dest[0] = getRandomIntRange(screenWidthMin, screenWidthMax);
        vector3Dest[1] = getRandomIntRange(screenHeightMin, screenHeightMax);
        // Determine which layer the fish will swim on
        vector3Dest[2] = getRandomIntRange(screenDepthMin, screenDepthMax);

        return vector3Dest;
    }

    function setRndVector3() {
        var vector3 = [getRandomIntRange(0, canvasWidth), getRandomIntRange(0, canvasHeight), getRandomIntRange(-15, -1)];

        return vector3;
    }

    function setVector3Current(x, y, z) {
        vector3Current[0] = x;
        vector3Current[1] = y;
        vector3Current[2] = z;
    }

    // *******************
    // MOVEMENT & PLACEMENT
    // *******************

    function basicMove(i, xd, yd, zd, xc, yc, zc) {
        vector3Current = [xc, yc, zc];

        // Swim right
        if (vector3Current[0] < vector3Destinations[i][0]) {
            vector3Current[0] += MoveSpeed;
            fishesMove[i] = direction[1];
        }

        // Swim left
        if (vector3Current[0] > vector3Destinations[i][0]) {
            vector3Current[0] -= MoveSpeed;
            fishesMove[i] = direction[0];
        }

        // Swim down
        if (vector3Current[1] < vector3Destinations[i][1]) {
            vector3Current[1] += MoveSpeed;
        }

        // Swim up
        if (vector3Current[1] > vector3Destinations[i][1]) {
            vector3Current[1] -= MoveSpeed;
        }

        return vector3Current;
    }

    function schoolMove(i, xd, yd, zd, xc, yc, zc) {
        vector3Current = [xc, yc, zc];
        // Swim right
        if (vector3Current[0] < vector3Destinations[i][0]) {
            vector3Current[0] += MoveSpeed;
            fishesMove[i] = direction[1];
        }

        // Swim left
        if (vector3Current[0] > vector3Destinations[i][0]) {
            vector3Current[0] -= MoveSpeed;
            fishesMove[i] = direction[0];
        }

        // Swim down
        if (vector3Current[1] < vector3Destinations[i][1]) {
            vector3Current[1] += MoveSpeed;
        }

        // Swim up
        if (vector3Current[1] > vector3Destinations[i][1]) {
            vector3Current[1] -= MoveSpeed;
        }

        return vector3Current;
    }

    // Applies to Shark, Whale, Swordfish, Manatees, squid
    function swim(i, x, y, z) {
        vector3Current = [x, y, z];
        //Check if at/near destination before moving
        vector3Destinations[i] = checkDestination(vector3Destinations[i][0], vector3Destinations[i][1], vector3Destinations[i][2], vector3Current[0], vector3Current[1], vector3Current[2])
        vector3Current = basicMove(i, vector3Destinations[i][0], vector3Destinations[i][1], vector3Destinations[i][2], vector3Current[0], vector3Current[1], vector3Current[2]);

        return vector3Current;
    }

    // Applies to Tuna, Clownfish, jellyfish, seals, walruses, dolphins
    function swimTogether(i, x, y, z) {
        vector3Current = [x, y, z];
        //Check if at/near destination before moving if lead fish
        if (i == fishes.length) {
            vector3Destinations[i] = checkDestination(vector3Destinations[i][0], vector3Destinations[i][1], vector3Destinations[i][2], vector3Current[0], vector3Current[1], vector3Current[2], false);
        }
        else {
            vector3Destinations[i] = checkDestination(vector3Destinations[i][0], vector3Destinations[i][1], vector3Destinations[i][2], vector3Current[0], vector3Current[1], vector3Current[2], true);
        }
        vector3Current = schoolMove(i, vector3Destinations[i][0], vector3Destinations[i][1], vector3Destinations[i][2], vector3Current[0], vector3Current[1], vector3Current[2]);

        return vector3Current;
    }

    // Applies to stingray, octopus, seahorse
    function swimFloor() {

    }

    // Applies to Eels, oysters
    function swimNone() {

    }

    function swimLeft() {
        if (vector3Current[0] > vector3Destinations[i][0]) {
            vector3Current[0] -= MoveSpeed;
            fishesMove[i] = direction[0];
        }
    }

    function swimRight() {
        if (vector3Current[0] < vector3Destinations[i][0]) {
            vector3Current[0] += MoveSpeed;
            fishesMove[i] = direction[1];
        }
    }

    function swimUp() {
        if (vector3Current[1] > vector3Destinations[i][1]) {
            vector3Current[1] -= MoveSpeed;
        }
    }

    function swimDown() {
        if (vector3Current[1] < vector3Destinations[i][1]) {
            vector3Current[1] += MoveSpeed;
        }
    }
</script>
